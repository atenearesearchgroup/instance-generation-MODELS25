model AddressBook

enum NoteType {
    MEETING,
    CALL,
    EMAIL
}

enum RelationshipType {
    BOSS,
    EMPLOYEE,
    SUBDIVISION,
    COWORKER
}

dataType Date
operations
    Date(date : String)
end

class AddressBook
end

abstract class Contact
attributes
    name : String
    phone : String
    website : String
    email : String
end

class Note
attributes
    author : String
    time : Date
    type : NoteType
    comment : String
end

class Company < Contact
attributes
    industry : String
end

class Person < Contact
attributes
    title : String
end

class Address
attributes
    city : String
    houseNr : String
    street : String
end

class Relationship
attributes
    type : RelationshipType
end

composition AddressBookMadeOfContact between
    AddressBook[1]
    Contact[*]
end

composition ContactContainsNote between
    Contact[1]
    Note[*]
end

association RelationshipToContact between
    Relationship[*] role isRelated
    Contact[1] role target
end

composition ContactToRelationship between
    Contact[1]
    Relationship[*] role relates
end

composition ContactContainsAddress between
    Contact[1] role source
    Address[*] role address
end


constraints
context Contact inv DifferentSourceTarget:
    self.relates->forAll(r | r.target<>self)